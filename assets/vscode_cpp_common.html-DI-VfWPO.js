import{_ as a,c as n,b as i,d as t,o as l,r as o}from"./app-B6dGMZIH.js";const p={};function c(d,s){const e=o("DiscourseComments");return l(),n("div",null,[s[0]||(s[0]=i(`<h2 id="安装c-插件" tabindex="-1"><a class="header-anchor" href="#安装c-插件"><span>安装C++插件</span></a></h2><blockquote><p><a href="https://code.visualstudio.com/docs/cpp/config-mingw#_prerequisites" target="_blank" rel="noopener noreferrer">Get Started with C++ and MinGW-w64 in Visual Studio Code</a></p></blockquote><p>VSCode插件 搜索 <code>C/C++ Extension Pack</code></p><figure><img src="https://code.visualstudio.com/assets/docs/cpp/cpp/cpp-extension.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>下面第三个，包含了 <code>C/C++</code> 的语言支持包， <code>CMake</code> 的支持包 ，以及 <code>C/C++ Themes</code> 的主题包。</p></blockquote><p>VS Marketplace <a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools-extension-pack" target="_blank" rel="noopener noreferrer">Link</a></p><h2 id="work-with-xmake" tabindex="-1"><a class="header-anchor" href="#work-with-xmake"><span>Work with xmake</span></a></h2><p>以下内容搬运自xmake，做了一丢丢裁剪，以适应本文档的内容。</p><div class="hint-container important"><p class="hint-container-title">SHOUTOUT to xmake!!!</p><p>Here&#39;s their <a href="https://xmake.io/#/zh-cn/" target="_blank" rel="noopener noreferrer">repo</a></p></div><h2 id="vscode-插件" tabindex="-1"><a class="header-anchor" href="#vscode-插件"><span>VSCode 插件</span></a></h2><ul><li><a href="https://github.com/xmake-io/xmake-vscode" target="_blank" rel="noopener noreferrer">xmake-vscode</a></li></ul><img src="https://raw.githubusercontent.com/xmake-io/xmake-vscode/master/res/problem.gif" width="650px"><p><a href="https://code.visualstudio.com/" target="_blank" rel="noopener noreferrer">VSCode</a>是常用的文本编辑器，xmake提供了插件支持。</p><h3 id="插件安装" tabindex="-1"><a class="header-anchor" href="#插件安装"><span>插件安装</span></a></h3><p>由于VSCode本身只提供了文本编辑的功能，我们需要安装插件以支持配置，编译，调试，语法提示等功能:</p><ul><li>XMake</li><li>C/C++</li><li>CodeLLDB</li></ul><p>在完成插件的安装后，重启VSCode可以看到下方的状态栏:</p><figure><img src="https://xmake.io/assets/img/guide/vscode_status_bar.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>可以在状态栏设置平台，架构，编译模式，工具链等选项，随后点击Build开始构建。</p><p>如果这些选项不够, 可以创建.vscode/settings.json并编写xmake需要的设置，如</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>{</span></span>
<span class="line"><span>...</span></span>
<span class="line"><span>  &quot;xmake.additionalConfigArguments&quot;: [</span></span>
<span class="line"><span>    &quot;--my_option=true&quot;</span></span>
<span class="line"><span>  ],</span></span>
<span class="line"><span>...</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其他xmake的选项也同样可以在settings.json中完成设置。修改后可通过 <code>&gt; XMake: Configure</code> 命令刷新配置。</p><h3 id="配置-intellsence" tabindex="-1"><a class="header-anchor" href="#配置-intellsence"><span>配置 Intellsence</span></a></h3><p>为了更好的 C++ 语法提示体验，xmake提供了对<a href="https://microsoft.github.io/language-server-protocol/" target="_blank" rel="noopener noreferrer">Language Server Protocol</a>（简称LSP）的支持。</p><p>在 vscode 中，我们可以通过使用 vscode-cpptools 或者 clangd 来提供 intellsence 支持。</p><p>另外，为了支持 intellsence，xmake 提供了 compile_commands.json 的生成支持。</p><h4 id="生成-compile-commands" tabindex="-1"><a class="header-anchor" href="#生成-compile-commands"><span>生成 compile_commands</span></a></h4><h5 id="自动触发生成" tabindex="-1"><a class="header-anchor" href="#自动触发生成"><span>自动触发生成</span></a></h5><p>通常在修改 xmake.lua 后点击保存，xmake-vscode 插件就会触发自动生成 compile_commands.json，默认存储在 .vscode 目录下。</p><p>这也是推荐方式，通常装完 xmake-vscode 插件，打开带有 xmake.lua 的工程后，只需要编辑 xmake.lua 保存即可触发，不需要任何其他额外操作。</p><h5 id="手动触发生成" tabindex="-1"><a class="header-anchor" href="#手动触发生成"><span>手动触发生成</span></a></h5><p>当然，如果没看到文件被生成，我们也可以在 vscode 中，可以使用 <code>&gt;XMake: UpdateIntellisense</code> 命令手动触发生成 .vscode/compile_commands.json。</p><h5 id="配置-xmake-lua-自动生成" tabindex="-1"><a class="header-anchor" href="#配置-xmake-lua-自动生成"><span>配置 xmake.lua 自动生成</span></a></h5><p>或者，我们也可以使用这个规则来自动更新生成 compile_commandss.json</p><div class="language-lua line-numbers-mode" data-highlighter="shiki" data-ext="lua" data-title="lua" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">add_rules</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;plugin.compile_commands.autoupdate&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, {</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">outputdir</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;.vscode&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">})</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">target</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;test&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    set_kind</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;binary&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    add_files</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;src/*.c&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这会使得在每次 build 后，自动更新此文件。</p><h5 id="手动执行命令生成" tabindex="-1"><a class="header-anchor" href="#手动执行命令生成"><span>手动执行命令生成</span></a></h5><p>如果上述方式都无效，我们也可以执行命令来生成。</p><div class="language-console line-numbers-mode" data-highlighter="shiki" data-ext="console" data-title="console" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">$ xmake project -k compile_commands .vscode</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="vscode-cpptools" tabindex="-1"><a class="header-anchor" href="#vscode-cpptools"><span>vscode-cpptools</span></a></h4><p>如果我们使用 vscode-cpptools 插件来提供 intellsence 支持，需要先去 vscode 插件市场，搜下 C++，默认第一个插件就是，安装下。</p><p>装完后，这个插件提供了 intellsence 和 调试支持。</p><p>然后，我们需要配置下 c_cpp_properties.json 文件，关联上我们生成的 <code>.vscode/compile_commands.json</code>。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>{</span></span>
<span class="line"><span>  &quot;env&quot;: {</span></span>
<span class="line"><span>    &quot;myDefaultIncludePath&quot;: [&quot;\${workspaceFolder}&quot;, &quot;\${workspaceFolder}/include&quot;],</span></span>
<span class="line"><span>    &quot;myCompilerPath&quot;: &quot;/usr/local/bin/gcc-7&quot;</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>  &quot;configurations&quot;: [</span></span>
<span class="line"><span>    {</span></span>
<span class="line"><span>      &quot;name&quot;: &quot;Mac&quot;,</span></span>
<span class="line"><span>      &quot;intelliSenseMode&quot;: &quot;clang-x64&quot;,</span></span>
<span class="line"><span>      &quot;includePath&quot;: [&quot;\${myDefaultIncludePath}&quot;, &quot;/another/path&quot;],</span></span>
<span class="line"><span>      &quot;macFrameworkPath&quot;: [&quot;/System/Library/Frameworks&quot;],</span></span>
<span class="line"><span>      &quot;defines&quot;: [&quot;FOO&quot;, &quot;BAR=100&quot;],</span></span>
<span class="line"><span>      &quot;forcedInclude&quot;: [&quot;\${workspaceFolder}/include/config.h&quot;],</span></span>
<span class="line"><span>      &quot;compilerPath&quot;: &quot;/usr/bin/clang&quot;,</span></span>
<span class="line"><span>      &quot;cStandard&quot;: &quot;c11&quot;,</span></span>
<span class="line"><span>      &quot;cppStandard&quot;: &quot;c++17&quot;,</span></span>
<span class="line"><span>      &quot;compileCommands&quot;: &quot;/path/to/compile_commands.json&quot;,</span></span>
<span class="line"><span>      &quot;browse&quot;: {</span></span>
<span class="line"><span>        &quot;path&quot;: [&quot;\${workspaceFolder}&quot;],</span></span>
<span class="line"><span>        &quot;limitSymbolsToIncludedHeaders&quot;: true,</span></span>
<span class="line"><span>        &quot;databaseFilename&quot;: &quot;&quot;</span></span>
<span class="line"><span>      }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>  ],</span></span>
<span class="line"><span>  &quot;version&quot;: 4</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也就是上面的 <code>&quot;compileCommands&quot;: &quot;/path/to/compile_commands.json&quot;</code> 配置项。</p><p>关于如果打开这个配置文件，以及更多的配置说明，见：</p><ul><li><a href="https://code.visualstudio.com/docs/cpp/configure-intellisense-crosscompilation" target="_blank" rel="noopener noreferrer">https://code.visualstudio.com/docs/cpp/configure-intellisense-crosscompilation</a></li><li><a href="https://code.visualstudio.com/docs/cpp/c-cpp-properties-schema-reference" target="_blank" rel="noopener noreferrer">https://code.visualstudio.com/docs/cpp/c-cpp-properties-schema-reference</a></li></ul><p>当然，理论上可以做到 xmake-vscode 插件自动关联设置这个文件，但是考虑到用户不一定使用 cpptools，有可能还会使用 clangd。</p><p>因此，默认自动配置并不是很好，而且作者暂时也没时间精力去改进它。</p><h4 id="clangd" tabindex="-1"><a class="header-anchor" href="#clangd"><span>clangd</span></a></h4><p>与此同时，我们可以选择安装支持 LSP 的语法提示插件，如 LLVM 推出的<a href="https://clangd.llvm.org/" target="_blank" rel="noopener noreferrer">clangd</a>，其功能稳定且提示流畅， 并通过 LSP 标准完成对不同编译工具链的支持。</p><p>使用 clangd 时，可能与上述的C/C++插件的提示功能有冲突，可以在 .vscode/settings.json 中添加设置将C/C++的语法提示功能关闭:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>{</span></span>
<span class="line"><span>  &quot;C_Cpp.codeAnalysis.runAutomatically&quot;: false,</span></span>
<span class="line"><span>  &quot;C_Cpp.intelliSenseEngine&quot;: &quot;Disabled&quot;,</span></span>
<span class="line"><span>  &quot;C_Cpp.formatting&quot;: &quot;Disabled&quot;,</span></span>
<span class="line"><span>  &quot;C_Cpp.autoAddFileAssociations&quot;: false,</span></span>
<span class="line"><span>  &quot;C_Cpp.autocompleteAddParentheses&quot;: false,</span></span>
<span class="line"><span>  &quot;C_Cpp.autocomplete&quot;: &quot;Disabled&quot;,</span></span>
<span class="line"><span>  &quot;C_Cpp.errorSquiggles&quot;: &quot;Disabled&quot;,</span></span>
<span class="line"><span>...</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同时由于 XMake 生成的 compile_commands.json 在 .vscode 目录，还需要设置 clangd 传参使其在正确位置寻找:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>{</span></span>
<span class="line"><span>  &quot;clangd.arguments&quot;: [</span></span>
<span class="line"><span>    &quot;--compile-commands-dir=.vscode&quot;,</span></span>
<span class="line"><span>...</span></span>
<span class="line"><span>  ]</span></span>
<span class="line"><span>...</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果配置后，还是没生效，可以尝试重启 vscode 和 clangd 进程，再验证下。</p>`,56)),t(e)])}const u=a(p,[["render",c],["__file","vscode_cpp_common.html.vue"]]),h=JSON.parse('{"path":"/guide/tools/vscode/vscode_cpp_common.html","title":"VSCode 通用C++环境","lang":"zh-CN","frontmatter":{"title":"VSCode 通用C++环境","date":"2024-09-13T06:04:21.000Z","author":{"name":"Samuka007","url":"https://github.com/Samuka007"},"categories":["Advance"],"tags":["VSCode","C++"],"description":"安装C++插件 Get Started with C++ and MinGW-w64 in Visual Studio Code VSCode插件 搜索 C/C++ Extension Pack 下面第三个，包含了 C/C++ 的语言支持包， CMake 的支持包 ，以及 C/C++ Themes 的主题包。 VS Marketplace Link W...","head":[["meta",{"property":"og:url","content":"https://guide.scutosc.cn/guide/tools/vscode/vscode_cpp_common.html"}],["meta",{"property":"og:site_name","content":"OSC Guide"}],["meta",{"property":"og:title","content":"VSCode 通用C++环境"}],["meta",{"property":"og:description","content":"安装C++插件 Get Started with C++ and MinGW-w64 in Visual Studio Code VSCode插件 搜索 C/C++ Extension Pack 下面第三个，包含了 C/C++ 的语言支持包， CMake 的支持包 ，以及 C/C++ Themes 的主题包。 VS Marketplace Link W..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://code.visualstudio.com/assets/docs/cpp/cpp/cpp-extension.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-26T07:05:06.000Z"}],["meta",{"property":"article:author","content":"Samuka007"}],["meta",{"property":"article:tag","content":"VSCode"}],["meta",{"property":"article:tag","content":"C++"}],["meta",{"property":"article:published_time","content":"2024-09-13T06:04:21.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-26T07:05:06.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"VSCode 通用C++环境\\",\\"image\\":[\\"https://code.visualstudio.com/assets/docs/cpp/cpp/cpp-extension.png\\",\\"https://xmake.io/assets/img/guide/vscode_status_bar.png\\"],\\"datePublished\\":\\"2024-09-13T06:04:21.000Z\\",\\"dateModified\\":\\"2024-09-26T07:05:06.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Samuka007\\",\\"url\\":\\"https://github.com/Samuka007\\"}]}"]]},"headers":[{"level":2,"title":"安装C++插件","slug":"安装c-插件","link":"#安装c-插件","children":[]},{"level":2,"title":"Work with xmake","slug":"work-with-xmake","link":"#work-with-xmake","children":[]},{"level":2,"title":"VSCode 插件","slug":"vscode-插件","link":"#vscode-插件","children":[{"level":3,"title":"插件安装","slug":"插件安装","link":"#插件安装","children":[]},{"level":3,"title":"配置 Intellsence","slug":"配置-intellsence","link":"#配置-intellsence","children":[]}]}],"git":{"createdTime":1726670714000,"updatedTime":1727334306000,"contributors":[{"name":"Samuka007","email":"samuka007@dragonos.org","commits":1},{"name":"Samuka007","email":"samuka007@qq.com","commits":1}]},"readingTime":{"minutes":3.48,"words":1045},"filePathRelative":"guide/tools/vscode/vscode_cpp_common.md","localizedDate":"2024年9月13日","autoDesc":true}');export{u as comp,h as data};
