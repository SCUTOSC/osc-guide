import{_ as a,c as e,b as n,d as l,o as t,r as p}from"./app-BPylNbmQ.js";const r={};function h(k,i){const s=p("DiscourseComments");return t(),e("div",null,[i[0]||(i[0]=n(`<div class="hint-container warning"><p class="hint-container-title">注意</p><p>不完整，待补充</p></div><h2 id="基本类型-与-标识符" tabindex="-1"><a class="header-anchor" href="#基本类型-与-标识符"><span>基本类型 与 标识符</span></a></h2><p>参考</p><ul><li>红 P9 / OCR P29</li><li>蓝 P32</li></ul><p><strong>关键名词</strong></p><ul><li><a href="https://zh.cppreference.com/w/cpp/language/types" target="_blank" rel="noopener noreferrer"><code>基本类型</code></a></li><li><a href="https://zh.cppreference.com/w/cpp/language/type" target="_blank" rel="noopener noreferrer"><code>类型</code></a></li><li><a href="https://zh.cppreference.com/w/cpp/language/identifiers" target="_blank" rel="noopener noreferrer"><code>标识符</code></a></li></ul><p><strong>C风格数组</strong></p><ul><li>红 1.1.14 P26 / OCR P46</li></ul><h2 id="类-class-与-结构体-struct" tabindex="-1"><a class="header-anchor" href="#类-class-与-结构体-struct"><span>类 Class 与 结构体 Struct</span></a></h2><p>事实上在编写 <a href="https://zh.cppreference.com/w/cpp/language/classes" target="_blank" rel="noopener noreferrer"><code>类</code></a> 之前，我更推荐先使用一下 标准库 提供的 类：</p><ul><li>std::array 与 std::vector <ul><li>红 1.1.15 P27 / OCR P47</li></ul></li></ul><blockquote><p><a href="https://compiler-explorer.com/z/Menne4vEa" target="_blank" rel="noopener noreferrer">https://compiler-explorer.com/z/Menne4vEa</a></p></blockquote><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;vector&gt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;iostream&gt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">using</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> namespace</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> std</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // Create a vector of Integers.</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    vector</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;int&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> myVector { </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">11</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">22</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> };</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // Add some more integers to the vector using push_back.</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    myVector</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">push_back</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">33</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    myVector</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">push_back</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">44</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // Access elements.</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    cout </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;1st element &quot;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> &lt;&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> myVector</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类的编写与进阶</p><ul><li>蓝 第三章</li><li>红 P61、135、197 / OCR P81、155、217</li></ul><blockquote><p>在 C++20 高级编程（第五版）中，由于使用了 module 的编写规范，所以对于类型/标识符 等定义会带上 <code>export</code> 关键字，如果不启用 module，可以忽略 <code>export</code> 关键字。</p></blockquote><p><strong>关键名词</strong></p><ul><li><a href="https://zh.cppreference.com/w/cpp/language/classes" target="_blank" rel="noopener noreferrer"><code>类</code></a></li><li><a href="https://zh.cppreference.com/w/cpp/language/object" target="_blank" rel="noopener noreferrer"><code>对象</code></a></li><li><a href="https://zh.cppreference.com/w/cpp/language/struct" target="_blank" rel="noopener noreferrer"><code>结构体</code></a></li></ul><div class="hint-container warning"><p class="hint-container-title">关于C++可能缺少的一课</p><p>以下内容可以跳过，因为可能涉及一系列关于 函数重载，类的复制、移动构造 等 进阶内容。</p></div><h2 id="联合体-union" tabindex="-1"><a class="header-anchor" href="#联合体-union"><span>联合体 Union</span></a></h2><ul><li><a href="https://zh.cppreference.com/w/cpp/language/union" target="_blank" rel="noopener noreferrer">联合体</a></li></ul><h2 id="类型推导" tabindex="-1"><a class="header-anchor" href="#类型推导"><span>类型推导</span></a></h2><h2 id="值类别" tabindex="-1"><a class="header-anchor" href="#值类别"><span>值类别</span></a></h2><ul><li><a href="https://zh.cppreference.com/w/cpp/language/value_category" target="_blank" rel="noopener noreferrer"><code>值类别</code></a></li></ul><p>以函数重载来举例，请问下列程序输出什么？为什么会有这样的区别？</p><blockquote><p><a href="https://compiler-explorer.com/z/eGqPvTxMz" target="_blank" rel="noopener noreferrer">https://compiler-explorer.com/z/eGqPvTxMz</a></p></blockquote><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;cstdio&gt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> X</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">X</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    std::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">puts</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;X&amp; x</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">X</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&amp;&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    std::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">puts</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;X&amp;&amp; x</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">X</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> getX</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> X{};</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    X x;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(x);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getX</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参考</p><ul><li>白 1.1 PDF P10</li></ul><h2 id="c-类型系统概览" tabindex="-1"><a class="header-anchor" href="#c-类型系统概览"><span>C++ 类型系统概览</span></a></h2><figure><img src="https://upload.cppreference.com/mwiki/images/9/96/cpp_types.svg" alt="C++ 类型系统概览" tabindex="0" loading="lazy"><figcaption>C++ 类型系统概览</figcaption></figure>`,31)),l(s)])}const c=a(r,[["render",h],["__file","2-variable-like.html.vue"]]),o=JSON.parse('{"path":"/guide/tutorial/cpp/book-read/2-variable-like.html","title":"2 - 各种变量一样的东西","lang":"zh-CN","frontmatter":{"title":"2 - 各种变量一样的东西","description":"注意 不完整，待补充 基本类型 与 标识符 参考 红 P9 / OCR P29 蓝 P32 关键名词 基本类型 类型 标识符 C风格数组 红 1.1.14 P26 / OCR P46 类 Class 与 结构体 Struct 事实上在编写 类 之前，我更推荐先使用一下 标准库 提供的 类： std::array 与 std::vector 红 1.1....","head":[["meta",{"property":"og:url","content":"https://guide.scutosc.cn/guide/tutorial/cpp/book-read/2-variable-like.html"}],["meta",{"property":"og:site_name","content":"OSC Guide"}],["meta",{"property":"og:title","content":"2 - 各种变量一样的东西"}],["meta",{"property":"og:description","content":"注意 不完整，待补充 基本类型 与 标识符 参考 红 P9 / OCR P29 蓝 P32 关键名词 基本类型 类型 标识符 C风格数组 红 1.1.14 P26 / OCR P46 类 Class 与 结构体 Struct 事实上在编写 类 之前，我更推荐先使用一下 标准库 提供的 类： std::array 与 std::vector 红 1.1...."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://upload.cppreference.com/mwiki/images/9/96/cpp_types.svg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-06T14:10:41.000Z"}],["meta",{"property":"article:author","content":"SCUT Open Source Community"}],["meta",{"property":"article:modified_time","content":"2024-10-06T14:10:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"2 - 各种变量一样的东西\\",\\"image\\":[\\"https://upload.cppreference.com/mwiki/images/9/96/cpp_types.svg\\"],\\"dateModified\\":\\"2024-10-06T14:10:41.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"SCUT Open Source Community\\",\\"url\\":\\"https://github.com/SCUTOSC/\\"}]}"]]},"headers":[{"level":2,"title":"基本类型 与 标识符","slug":"基本类型-与-标识符","link":"#基本类型-与-标识符","children":[]},{"level":2,"title":"类 Class 与 结构体 Struct","slug":"类-class-与-结构体-struct","link":"#类-class-与-结构体-struct","children":[]},{"level":2,"title":"联合体 Union","slug":"联合体-union","link":"#联合体-union","children":[]},{"level":2,"title":"类型推导","slug":"类型推导","link":"#类型推导","children":[]},{"level":2,"title":"值类别","slug":"值类别","link":"#值类别","children":[]},{"level":2,"title":"C++ 类型系统概览","slug":"c-类型系统概览","link":"#c-类型系统概览","children":[]}],"git":{"createdTime":1728223841000,"updatedTime":1728223841000,"contributors":[{"name":"Samuka007","email":"samuka007@dragonos.org","commits":1}]},"readingTime":{"minutes":1.45,"words":435},"filePathRelative":"guide/tutorial/cpp/book-read/2-variable-like.md","localizedDate":"2024年10月6日","autoDesc":true}');export{c as comp,o as data};
